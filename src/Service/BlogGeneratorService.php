<?php

namespace App\Service;

use App\Entity\Blog;
use App\Service\OpenAIService;
use Doctrine\ORM\EntityManagerInterface;
use Psr\Log\LoggerInterface;

class BlogGeneratorService
{
    public function __construct(
        private OpenAIService $openAIService,
        private EntityManagerInterface $entityManager,
        private LoggerInterface $logger
    ) {}

    /**
     * G√©n√®re un article de blog avec OpenAI en conservant la structure exacte
     */
    public function generateBlogArticle(?string $topic = null): Blog
    {
        // Sujets pr√©d√©finis si aucun sujet n'est fourni
        $defaultTopics = [
            "L'importance de l'estimation pr√©cise dans les projets web en 2025",
            "Les tendances du d√©veloppement web √† surveiller cette ann√©e",
            "Comment optimiser les co√ªts de d√©veloppement d'une application",
            "Les erreurs courantes dans la gestion de projet web",
            "Guide complet pour choisir les bonnes technologies web",
            "L'impact de l'IA sur le d√©veloppement web moderne",
            "Strat√©gies pour am√©liorer l'UX/UI de votre application",
            "Les meilleures pratiques de s√©curit√© web en 2025"
        ];

        $selectedTopic = $topic ?: $defaultTopics[array_rand($defaultTopics)];

        // Prompt optimis√© pour conserver la structure exacte de ChatGPT
        $prompt = $this->buildStructuredPrompt($selectedTopic);

        try {
            // Appel OpenAI avec des param√®tres optimis√©s pour la g√©n√©ration de contenu
            $result = $this->openAIService->callOpenAI($prompt, [
                'model' => 'gpt-4o-mini',
                'temperature' => 0.3, // Plus strict pour la structure
                'max_tokens' => 3000, // Plus de tokens pour un article complet
                'response_format' => ['type' => 'json_object']
            ]);

            // Post-traitement : rejet si <div> ou <span> pr√©sents, ou remplacement automatique
            if (isset($result['contenu']) && preg_match('/<(div|span)[^>]*>/i', $result['contenu'])) {
                // Option stricte : rejet
                throw new \Exception('La r√©ponse OpenAI contient des <div> ou <span>, prompt non respect√©.');
                // Option tol√©rante :
                // $result['contenu'] = preg_replace('/<div[^>]*>/', '<h2>', $result['contenu']);
                // $result['contenu'] = str_replace('</div>', '</h2>', $result['contenu']);
            }

            // Validation de la r√©ponse
            $this->validateResponse($result);

            // Cr√©ation de l'entit√© Blog
            $article = $this->createBlogEntity($result);

            // Sauvegarde en base
            $this->entityManager->persist($article);
            $this->entityManager->flush();

            $this->logger->info('Article de blog g√©n√©r√© avec succ√®s', [
                'titre' => $article->getTitre(),
                'slug' => $article->getSlug()
            ]);

            return $article;
        } catch (\Exception $e) {
            $this->logger->error('Erreur lors de la g√©n√©ration d\'article', [
                'topic' => $selectedTopic,
                'error' => $e->getMessage()
            ]);

            throw new \Exception('Impossible de g√©n√©rer l\'article : ' . $e->getMessage());
        }
    }

    /**
     * Construit un prompt structur√© pour l'audience tech
     */
    private function buildStructuredPrompt(string $topic): string
    {
        return "üö® INTERDICTION ABSOLUE d‚Äôutiliser <div> ou <span> ou toute balise autre que <h2>, <p>, <ul>, <ol> ! Si tu utilises une autre balise, la r√©ponse sera rejet√©e. üö®\n\n" .
            "UTILISE UNIQUEMENT CES BALISES HTML :\n" .
            "- <h2>Titre principal</h2> (5-6 sections dans l'article)\n" .
            "- <p>Paragraphe de texte avec <strong>mots-cl√©s</strong></p>\n" .
            "- <ul><li>Point de liste</li></ul>\n" .
            "- <ol><li>√âtape num√©rot√©e</li></ol>\n\n" .
            "‚ùå INTERDIT : <div>, <span>, ou tout autre balise\n" .
            "‚úÖ OBLIGATOIRE : <h2>, <p>, <ul>, <ol> uniquement\n\n" .
            "EXEMPLE EXACT √Ä REPRODUIRE :\n" .
            "<h2>Titre de section</h2>\n" .
            "<p>Paragraphe d'introduction avec <strong>mots-cl√©s</strong>.</p>\n" .
            "<ul><li>Point important</li><li>Autre point</li></ul>\n" .
            "<p>Paragraphe de transition.</p>\n\n" .
            "---\n\n" .
            "Tu es un expert en r√©daction web sp√©cialis√© dans les projets tech. R√©dige un article sur : \"$topic\".\n\n" .
            "AUDIENCE : Entreprises tech, CTOs, agences web, d√©veloppeurs freelances\n" .
            "CONTEXTE : QuickEsti est une plateforme d'estimation de projets web qui aide les d√©veloppeurs freelances, agences et entreprises √† √©valuer pr√©cis√©ment leurs projets.\n\n" .
            "STRUCTURE : 5-6 sections avec <h2>\n" .
            "STYLE : Professionnel, exemples concrets, conseils pratiques. Ajoute quelques emojis pour rendre l'article plus attrayant. Invente des exemples (avec des chiffres, nom d'entreprise, etc.) avant/apr√®s utiles pour illustrer les points cl√©s (parfois).\n\n" .
            "R√àGLE ABSOLUE : Utilise UNIQUEMENT <h2>, <p>, <ul>, <ol>. JAMAIS de <div> ni <span>.\n\n" .
            "√âcris un article de 800-1400 mots avec 5-6 sections <h2>. Int√®gre naturellement les mots-cl√©s : estimation projet, d√©veloppement web, co√ªt d√©veloppement, gestion projet, ROI, budget tech, agile, agence web, freelance.\nA la fin ajoute un call-to-action pour inciter √† utiliser QuickEsti ou un conseil actionnable pour am√©liorer les projets web.\n\n" .
            "R√âPONSE JSON EXACTE :\n" .
            "{\n    \"titre\": \"Titre SEO optimis√© (50-60 caract√®res)\",\n    \"slug\": \"slug-seo-automatique\",\n    \"contenu\": \"HTML complet avec structure pr√©serv√©e\",\n    \"auteur\": \"J√©r√©mie N.\",\n    \"metaDescription\": \"Description SEO 150-160 caract√®res\",\n    \"motsCles\": [\"estimation-projet\", \"d√©veloppement-web\", \"gestion-projet\"]\n}\n\n" .
            "IMP√âRATIF : L'article doit parler directement aux pr√©occupations de l'audience tech (co√ªts, d√©lais, qualit√©, ROI) avec des exemples du secteur. Pr√©serve exactement le formatage HTML g√©n√©r√©.";
    }

    /**
     * Valide la r√©ponse OpenAI
     */
    private function validateResponse(array $result): void
    {
        $requiredFields = ['titre', 'slug', 'contenu', 'auteur'];

        foreach ($requiredFields as $field) {
            if (!isset($result[$field]) || empty($result[$field])) {
                throw new \Exception("Champ manquant ou vide : $field");
            }
        }

        // Validation du slug (format URL)
        if (!preg_match('/^[a-z0-9-]+$/', $result['slug'])) {
            throw new \Exception("Format de slug invalide");
        }

        // Validation du contenu HTML
        if (strlen($result['contenu']) < 500) {
            throw new \Exception("Contenu trop court");
        }

        // Validation stricte : aucune balise <div> ou <span> ne doit √™tre pr√©sente
        if (preg_match('/<(div|span)[^>]*>/i', $result['contenu'])) {
            throw new \Exception('Le contenu g√©n√©r√© contient des <div> ou <span>, prompt non respect√©.');
        }
    }

    /**
     * Cr√©e l'entit√© Blog √† partir de la r√©ponse OpenAI
     */
    private function createBlogEntity(array $result): Blog
    {
        $article = new Blog();

        $article->setTitre($result['titre']);
        $article->setSlug($this->ensureUniqueSlug($result['slug']));
        $article->setContenu($result['contenu']);
        $article->setAuteur($result['auteur']);
        $article->setPublished(true); // Publi√© par d√©faut
        $article->setCreatedAt(new \DateTimeImmutable('now'));
        $article->setUpdatedAt(null); // Null √† la cr√©ation, sera d√©fini lors des modifications

        return $article;
    }

    /**
     * Assure l'unicit√© du slug
     */
    private function ensureUniqueSlug(string $baseSlug): string
    {
        $slug = $baseSlug;
        $counter = 1;

        while ($this->slugExists($slug)) {
            $slug = $baseSlug . '-' . $counter;
            $counter++;
        }

        return $slug;
    }

    /**
     * V√©rifie si un slug existe d√©j√†
     */
    private function slugExists(string $slug): bool
    {
        return $this->entityManager->getRepository(Blog::class)
            ->findOneBy(['slug' => $slug]) !== null;
    }
}
